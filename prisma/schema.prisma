generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  accounts      Account[]
  sessions      Session[]
  imapAccounts  ImapAccount[]
  Group         Group[]
  syncAccounts  SyncAccount[]
  contacts      Contact[]
  twilioAccounts TwilioAccount[]
  clientCache   ClientCache[]
  organizationIds String[] @db.ObjectId // Organizations user belongs to
  organizations Organization[] @relation(fields: [organizationIds], references: [id])
  ownedOrganizations Organization[] @relation("OrganizationOwner")
  stripeCustomerId String? // Stripe customer ID for individual subscriptions
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model VerificationRequest {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model ImapAccount {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  label       String
  credentials String // Encrypted credentials
  username    String? // Added username field
  host        String? // Added host field
  port        Int? // Added port field
  userId      String   @db.ObjectId
  lastSync    DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Group {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  addresses String[] // Array of email addresses in the group
  phoneNumbers String[] // Array of phone numbers in the group
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model SyncAccount {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  userId           String    @db.ObjectId
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  platform         String    // Platform type (e.g., "justcall", "email", "whatsapp")
  credentials      String    // Encrypted credentials
  accountIdentifier String   // Username or account identifier for the platform
  lastSync         DateTime  @default(now())
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt 
  messages         Message[]

  @@index([userId])
  @@index([platform])
}

model Contact {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  userId       String        @db.ObjectId
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  name         String
  email        String?
  phone        String?
  avatar       String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  senders      Sender[]
  conversations Conversation[]

  @@index([userId])
}

model Sender {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  contactId    String   @db.ObjectId
  contact      Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  platform     String   // Platform type (e.g., "justcall", "email", "whatsapp")
  identifier   String   // Email address, phone number, or account identifier
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([contactId])
  @@index([platform, identifier])
}

model Conversation {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  contactId    String    @db.ObjectId
  contact      Contact   @relation(fields: [contactId], references: [id], onDelete: Cascade)
  title        String?
  lastActivity DateTime  @default(now())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  messages     Message[]

  @@index([contactId])
}

model Message {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  syncAccountId  String?      @db.ObjectId
  syncAccount    SyncAccount? @relation(fields: [syncAccountId], references: [id])
  platform       String       // Platform type (e.g., "justcall", "email", "whatsapp")
  externalId     String?      // ID from the external platform
  direction      String       // "inbound" or "outbound"
  content        String
  contentType    String       // "text", "html", etc.
  metadata       Json?        // Additional platform-specific metadata
  attachments    Json?        // Information about attachments
  sentAt         DateTime
  receivedAt     DateTime     @default(now())
  isRead         Boolean      @default(false)

  @@index([conversationId])
  @@index([platform, externalId])
  @@index([syncAccountId])
}

model TwilioAccount {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  label       String
  accountSid  String
  authToken   String
  phoneNumber String
  lastSync    DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  twilioMessages TwilioMessage[]

  @@index([userId])
}

model TwilioMessage {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  twilioAccountId String      @db.ObjectId
  twilioAccount   TwilioAccount @relation(fields: [twilioAccountId], references: [id], onDelete: Cascade)
  messageSid      String      @unique
  from            String
  to              String
  body            String
  status          String
  direction       String      // "inbound" or "outbound"
  conversationId  String?     @db.ObjectId
  sentAt          DateTime
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@index([twilioAccountId])
  @@index([from, to])
}

model ClientCache {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  key        String   // Cache key (e.g., "emails", "gmail_page_tokens", "sidebar:state", etc.)
  value      String   // JSON stringified data
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, key])
  @@index([userId])
}

// New models for subscription management
model Organization {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  ownerId         String   @db.ObjectId
  owner           User     @relation("OrganizationOwner", fields: [ownerId], references: [id])
  memberIds       String[] @db.ObjectId
  members         User[]   @relation(fields: [memberIds], references: [id])
  subscription    Subscription?
  stripeCustomerId String? // Stripe customer ID for org subscriptions

  @@index([ownerId])
}

model Subscription {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  organizationId  String   @db.ObjectId
  organization    Organization @relation(fields: [organizationId], references: [id])
  stripeSubscriptionId String
  stripePriceId   String
  status          String // active, canceled, past_due, etc.
  currentPeriodStart DateTime
  currentPeriodEnd DateTime
  cancelAtPeriodEnd Boolean @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  // Plan limits - now shared across all users
  planType        String  // lite, standard, business, enterprise
  maxUsers        Int     // maximum number of users allowed
  totalStorage    Int     // total storage in MB shared across all users
  totalConnections Int    // total connected accounts shared across all users
  totalAiCredits  Int     // total monthly AI credits shared across all users
  usedStorage     Int     @default(0) // currently used storage
  usedConnections Int     @default(0) // currently used connections
  usedAiCredits   Int     @default(0) // used AI credits for current period
  customLimits    Json?   // for enterprise plans with custom limits
  // Trial-related fields
  trialEndsAt     DateTime? // When the trial period ends, if applicable
  trialStartedAt  DateTime? @default(now()) // When the trial started
  hasTrialEnded   Boolean   @default(false) // Track if trial has ended

  @@unique([organizationId])
  @@unique([stripeSubscriptionId])
}
