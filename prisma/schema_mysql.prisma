generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String         @id @default(uuid())
  name           String?
  email          String?        @unique
  emailVerified  DateTime?
  image          String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  accounts       Account[]
  sessions       Session[]
  imapAccounts   ImapAccount[]
  Group          Group[]
  syncAccounts   SyncAccount[]
  contacts       Contact[]
  twilioAccounts TwilioAccount[]
  clientCache    ClientCache[]
}

model VerificationToken {
  id         String   @id @default(uuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model VerificationRequest {
  id         String   @id @default(uuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model ImapAccount {
  id          String   @id @default(uuid())
  label       String
  credentials String
  username    String?
  host        String?
  port        Int?
  userId      String
  lastSync    DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Group {
  id           String   @id @default(uuid())
  name         String
  // Store arrays as JSON (e.g., a JSON array of strings)
  addresses    Json
  phoneNumbers Json
  userId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model SyncAccount {
  id                String    @id @default(uuid())
  userId            String
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  platform          String
  credentials       String
  accountIdentifier String
  lastSync          DateTime  @default(now())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  messages          Message[]

  @@index([userId])
  @@index([platform])
}

model Contact {
  id            String         @id @default(uuid())
  userId        String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  name          String
  email         String?
  phone         String?
  avatar        String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  senders       Sender[]
  conversations Conversation[]

  @@index([userId])
}

model Sender {
  id         String   @id @default(uuid())
  contactId  String
  contact    Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  platform   String
  identifier String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([contactId])
  @@index([platform, identifier])
}

model Conversation {
  id           String    @id @default(uuid())
  contactId    String
  contact      Contact   @relation(fields: [contactId], references: [id], onDelete: Cascade)
  title        String?
  lastActivity DateTime  @default(now())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  messages     Message[]

  @@index([contactId])
}

model Message {
  id             String       @id @default(uuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  syncAccountId  String?
  syncAccount    SyncAccount? @relation(fields: [syncAccountId], references: [id])
  platform       String
  externalId     String?
  direction      String
  content        String
  contentType    String
  metadata       Json?
  attachments    Json?
  sentAt         DateTime
  receivedAt     DateTime     @default(now())
  isRead         Boolean      @default(false)

  @@index([conversationId])
  @@index([platform, externalId])
  @@index([syncAccountId])
}

model TwilioAccount {
  id           String   @id @default(uuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  label        String
  accountSid   String
  authToken    String
  phoneNumber  String
  lastSync     DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  twilioMessages TwilioMessage[]

  @@index([userId])
}

model TwilioMessage {
  id              String       @id @default(uuid())
  twilioAccountId String
  twilioAccount   TwilioAccount @relation(fields: [twilioAccountId], references: [id], onDelete: Cascade)
  messageSid      String       @unique
  from            String
  to              String
  body            String
  status          String
  direction       String
  conversationId  String?
  sentAt          DateTime
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@index([twilioAccountId])
  @@index([from, to])
}

model ClientCache {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  key       String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, key])
  @@index([userId])
}
